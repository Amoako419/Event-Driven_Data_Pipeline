{
  "Comment": "Create Cluster, Register TD1, Run Task1, Register TD2, Run Task2, Cleanup",
  "StartAt": "CreateCluster",
  "States": {
    "CreateCluster": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:ecs:createCluster",
      "Parameters": {
        "ClusterName.$": "States.Format('{}-{}', $.baseClusterName, $$.Execution.Id)"
      },
      "ResultPath": "$.clusterInfo",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "NotifyGeneralFailure",
          "ResultPath": "$.errorInfo"
        }
      ],
      "Next": "RegisterTaskDefinition1"
    },
    "RegisterTaskDefinition1": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:ecs:registerTaskDefinition",
      "Parameters": {
        "Family.$": "States.Format('{}-task1-{}', $.baseTaskFamilyPrefix, $$.Execution.Id)",
        "RequiresCompatibilities": [
          "FARGATE"
        ],
        "NetworkMode": "awsvpc",
        "Cpu.$": "$.taskCpu",
        "Memory.$": "$.taskMemory",
        "ExecutionRoleArn.$": "$.taskExecutionRoleArn",
        "TaskRoleArn.$": "$.taskRoleArn",
        "ContainerDefinitions.$": "$.containerDefinitionsTask1"
      },
      "ResultPath": "$.taskDefinitionInfoTask1",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "DeleteClusterOnError",
          "ResultPath": "$.errorInfo"
        }
      ],
      "Next": "RunTask1"
    },
    "RunTask1": {
      "Type": "Task",
      "Resource": "arn:aws:states:::ecs:runTask.sync",
      "Parameters": {
        "LaunchType": "FARGATE",
        "Cluster.$": "$.clusterInfo.Cluster.ClusterArn",
        "TaskDefinition.$": "$.taskDefinitionInfoTask1.TaskDefinition.TaskDefinitionArn",
        "NetworkConfiguration.$": "$.networkConfiguration",
        "Overrides": {
          "ContainerOverrides": [
            {
              "Name.$": "$.containerDefinitionsTask1[0].Name",
              "Environment.$": "$.taskEnvironmentOverridesTask1"
            }
          ]
        }
      },
      "ResultPath": "$.task1Result",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "CleanupTask1OnError",
          "ResultPath": "$.errorInfo"
        }
      ],
      "Next": "CheckTask1Result"
    },
    "CheckTask1Result": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.task1Result.Tasks[0].LastStatus",
              "StringEquals": "STOPPED"
            },
            {
              "Variable": "$.task1Result.Tasks[0].Containers[0].ExitCode",
              "NumericEquals": 0
            }
          ],
          "Next": "RegisterTaskDefinition2"
        }
      ],
      "Default": "NotifyTask1FailureAndCleanup"
    },
    "RegisterTaskDefinition2": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:ecs:registerTaskDefinition",
      "Parameters": {
        "Family.$": "States.Format('{}-task2-{}', $.baseTaskFamilyPrefix, $$.Execution.Id)",
        "RequiresCompatibilities": [
          "FARGATE"
        ],
        "NetworkMode": "awsvpc",
        "Cpu.$": "$.taskCpu",
        "Memory.$": "$.taskMemory",
        "ExecutionRoleArn.$": "$.taskExecutionRoleArn",
        "TaskRoleArn.$": "$.taskRoleArn",
        "ContainerDefinitions.$": "$.containerDefinitionsTask2"
      },
      "ResultPath": "$.taskDefinitionInfoTask2",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "CleanupTask1OnError",
          "ResultPath": "$.errorInfo"
        }
      ],
      "Next": "RunTask2"
    },
    "RunTask2": {
      "Type": "Task",
      "Resource": "arn:aws:states:::ecs:runTask.sync",
      "Parameters": {
        "LaunchType": "FARGATE",
        "Cluster.$": "$.clusterInfo.Cluster.ClusterArn",
        "TaskDefinition.$": "$.taskDefinitionInfoTask2.TaskDefinition.TaskDefinitionArn",
        "NetworkConfiguration.$": "$.networkConfiguration",
        "Overrides": {
          "ContainerOverrides": [
            {
              "Name.$": "$.containerDefinitionsTask2[0].Name",
              "Environment.$": "$.taskEnvironmentOverridesTask2"
            }
          ]
        }
      },
      "ResultPath": "$.task2Result",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "CleanupTask2OnError",
          "ResultPath": "$.errorInfo"
        }
      ],
      "Next": "CheckTask2Result"
    },
    "CheckTask2Result": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.task2Result.Tasks[0].LastStatus",
              "StringEquals": "STOPPED"
            },
            {
              "Variable": "$.task2Result.Tasks[0].Containers[0].ExitCode",
              "NumericEquals": 0
            }
          ],
          "Next": "CleanupSuccessPath"
        }
      ],
      "Default": "NotifyTask2FailureAndCleanup"
    },
    "CleanupSuccessPath": {
      "Type": "Parallel",
      "Comment": "Deregister TD1 and TD2 in parallel after full success",
      "Branches": [
        {
          "StartAt": "DeregisterTaskDefinition1Success",
          "States": {
            "DeregisterTaskDefinition1Success": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:ecs:deregisterTaskDefinition",
              "Parameters": {
                "TaskDefinition.$": "$.taskDefinitionInfoTask1.TaskDefinition.TaskDefinitionArn"
              },
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Comment": "Ignore Error",
                  "Next": "CleanupBranchPass1"
                }
              ],
              "Next": "CleanupBranchPass1"
            },
            "CleanupBranchPass1": {
              "Type": "Pass",
              "End": true
            }
          }
        },
        {
          "StartAt": "DeregisterTaskDefinition2Success",
          "States": {
            "DeregisterTaskDefinition2Success": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:ecs:deregisterTaskDefinition",
              "Parameters": {
                "TaskDefinition.$": "$.taskDefinitionInfoTask2.TaskDefinition.TaskDefinitionArn"
              },
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Comment": "Ignore Error",
                  "Next": "CleanupBranchPass2"
                }
              ],
              "Next": "CleanupBranchPass2"
            },
            "CleanupBranchPass2": {
              "Type": "Pass",
              "End": true
            }
          }
        }
      ],
      "ResultPath": null,
      "Next": "DeleteClusterSuccessPath"
    },
    "DeleteClusterSuccessPath": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:ecs:deleteCluster",
      "Parameters": {
        "Cluster.$": "$.clusterInfo.Cluster.ClusterArn"
      },
      "ResultPath": null,
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "NotifyCleanupFailure",
          "ResultPath": "$.errorInfo"
        }
      ],
      "Next": "NotifySuccess"
    },
    "NotifySuccess": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Message": {
          "status": "SUCCESS",
          "cause": "ECS ephemeral workflow completed successfully.",
          "executionName.$": "$$.Execution.Name"
        },
        "TopicArn": "arn:aws:sns:eu-west-1:405894843300:etl"
      },
      "End": true
    },
    "NotifyTask1FailureAndCleanup": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Message": {
          "status": "FAILED",
          "cause": "ECS Task execution failed.",
          "executionName.$": "$$.Execution.Name",
          "taskResult.$": "$.taskResult"
        },
        "TopicArn": "arn:aws:sns:eu-west-1:405894843300:etl"
      },
      "Next": "CleanupTask1OnError"
    },
    "NotifyTask2FailureAndCleanup": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Message": {
          "status": "FAILED",
          "cause": "ECS Task execution failed.",
          "executionName.$": "$$.Execution.Name",
          "taskResult.$": "$.taskResult"
        },
        "TopicArn": "arn:aws:sns:eu-west-1:405894843300:etl"
      },
      "Next": "CleanupTask2OnError"
    },
    "CleanupTask1OnError": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:ecs:deregisterTaskDefinition",
      "Parameters": {
        "TaskDefinition.$": "$.taskDefinitionInfoTask1.TaskDefinition.TaskDefinitionArn"
      },
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Comment": "Ignore Error",
          "Next": "DeleteClusterOnError"
        }
      ],
      "Next": "DeleteClusterOnError"
    },
    "CleanupTask2OnError": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "DeregisterTaskDefinition1OnError",
          "States": {
            "DeregisterTaskDefinition1OnError": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:ecs:deregisterTaskDefinition",
              "Parameters": {
                "TaskDefinition.$": "$.taskDefinitionInfoTask1.TaskDefinition.TaskDefinitionArn"
              },
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Comment": "Ignore Error",
                  "Next": "CleanupBranchPass3"
                }
              ],
              "Next": "CleanupBranchPass3"
            },
            "CleanupBranchPass3": {
              "Type": "Pass",
              "End": true
            }
          }
        },
        {
          "StartAt": "DeregisterTaskDefinition2OnError",
          "States": {
            "DeregisterTaskDefinition2OnError": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:ecs:deregisterTaskDefinition",
              "Parameters": {
                "TaskDefinition.$": "$.taskDefinitionInfoTask2.TaskDefinition.TaskDefinitionArn"
              },
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "Comment": "Ignore Error",
                  "Next": "CleanupBranchPass4"
                }
              ],
              "Next": "CleanupBranchPass4"
            },
            "CleanupBranchPass4": {
              "Type": "Pass",
              "End": true
            }
          }
        }
      ],
      "ResultPath": null,
      "Next": "DeleteClusterOnError"
    },
    "DeleteClusterOnError": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:ecs:deleteCluster",
      "Parameters": {
        "Cluster.$": "$.clusterInfo.Cluster.ClusterArn"
      },
      "Comment": "Ignore Error",
      "Next": "NotifyGeneralFailure"
    },
    "NotifyGeneralFailure": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "TopicArn": "arn:aws:sns:eu-west-1:405894843300:etl",
        "Message.$": "$"
      },
      "Next": "WorkflowFailed"
    },
    "NotifyCleanupFailure": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "Message": {
          "status": "WARNING",
          "cause": "ECS ephemeral workflow completed task, but cleanup failed.",
          "executionName.$": "$$.Execution.Name",
          "errorInfo.$": "$.errorInfo"
        },
        "TopicArn": "arn:aws:sns:eu-west-1:405894843300:etl"
      },
      "End": true
    },
    "WorkflowFailed": {
      "Type": "Fail",
      "Comment": "Workflow failed"
    }
  }
}